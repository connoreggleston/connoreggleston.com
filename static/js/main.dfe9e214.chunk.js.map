{"version":3,"sources":["assets/headshot.jpeg","assets/hero-cropped.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StyledFontAwesomeIcon","styled","FontAwesomeIcon","_templateObject","props","margin","Headshot","img","attrs","src","headshot","_templateObject2","Content","div","_templateObject3","Container","_templateObject4","heroImage","Title","_templateObject5","App","react_default","a","createElement","href","icon","faGithub","size","faLinkedinIn","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,ulDCOxC,IAoBMC,EAAwBC,YAAOC,IAAPD,CAAHE,IACT,SAAAC,GAAK,OAAIA,EAAMC,QAAU,GArBjB,SAgCpBC,EAAWL,IAAOM,IAAIC,MAAM,SAAAJ,GAAK,MAAK,CAC1CK,IAAKC,MADUT,CAAHU,IAhCY,SA2CpBC,EAAUX,IAAOY,IAAVC,IA3Ca,SAsDpBC,EAAYd,IAAOY,IAAVG,IAGWC,IAzDA,SAoEpBC,EAAQjB,IAAOY,IAAVM,IAnEc,SADC,SAiFXC,EA9EH,kBACVC,EAAAC,EAAAC,cAACR,EAAD,KACEM,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAACjB,EAAD,MACAe,EAAAC,EAAAC,cAACL,EAAD,yBACAG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,qCACNH,EAAAC,EAAAC,cAACvB,EAAD,CAAuByB,KAAMC,IAAUC,KAAK,KAAKtB,OAAO,UAE1DgB,EAAAC,EAAAC,cAAA,KAAGC,KAAK,0CACNH,EAAAC,EAAAC,cAACvB,EAAD,CAAuByB,KAAMG,IAAcD,KAAK,YCRtCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfe9e214.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.2437361e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/hero-cropped.05850c07.jpg\";","import React from 'react';\nimport styled from 'styled-components'\nimport headshot from './assets/headshot.jpeg'\nimport heroImage from './assets/hero-cropped.jpg'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faLinkedinIn } from '@fortawesome/free-brands-svg-icons'\n\nconst BREAKPOINT_MEDIUM = '768px';\nconst BREAKPOINT_LARGE = '1280px';\n\nconst App = () => (\n  <Container>\n    <Content>\n      <Headshot />\n      <Title>Connor Eggleston</Title>\n      <div>\n        <a href='http://github.com/connoreggleston'>\n          <StyledFontAwesomeIcon icon={faGithub} size='lg' margin='2rem' />\n        </a>\n        <a href='http://linkedin.com/in/connoreggleston'>\n          <StyledFontAwesomeIcon icon={faLinkedinIn} size='lg' />\n        </a>\n      </div>\n    </Content>\n  </Container>\n)\n\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  margin-right: ${props => props.margin || 0};\n  background: rgba(200, 200, 200, 0.6);\n  padding: 1rem;\n  border-radius: 50%;\n  color: #111;\n  @media (max-width: ${BREAKPOINT_MEDIUM}) {\n    background: none;\n    border: 1px solid black;\n  }\n`\n\nconst Headshot = styled.img.attrs(props => ({\n  src: headshot\n}))`\n  box-shadow: 2px 2px 10px 0 rgba(0, 0, 0, 0.3), 0 0 4px 0 rgba(0, 0, 0, 0.08);\n  border-radius: 50%;\n  margin-bottom: 2rem;\n  @media (min-width: ${BREAKPOINT_MEDIUM}) {\n    display: none;\n  }\n`\n\nconst Content = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  @media (max-width: ${BREAKPOINT_MEDIUM}) {\n    width: 100%;\n  }\n`\n\nconst Container = styled.div`\n  /* background: #282c34; */\n  height: 100vh;\n  background-image: url(${heroImage});\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  @media (max-width: ${BREAKPOINT_MEDIUM}) {\n    background-image: none;\n  }\n`\n\nconst Title = styled.div`\n  color: white;\n  font-size: 4rem;\n  margin-bottom: 2rem;\n  @media (max-width: ${BREAKPOINT_LARGE}) {\n    font-size: 3rem;\n  }\n  @media (max-width: ${BREAKPOINT_MEDIUM}) {\n    font-size: 2rem;\n    color: #282c34;\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/app.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}